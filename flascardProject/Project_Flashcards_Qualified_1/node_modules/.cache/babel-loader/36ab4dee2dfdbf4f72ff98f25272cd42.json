{"ast":null,"code":"var _jsxFileName = \"/home/iblis/src/flascardProject/Project_Flashcards_Qualified_1/src/Layout/StudyDeck.jsx\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { useHistory, useParams, Link } from \"react-router-dom\";\nimport { listDecks, listCards, readDeck } from \"../utils/api\";\nexport default function StudyDeck() {\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [cardList, setCardList] = useState([]);\n  const [flipped, setFlipped] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(0);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n    listCards(deckId, abortController.signal).then(setSelectedDeck);\n    return () => abortController.abort();\n  }, [deckId]);\n  console.log(selectedDeck); // const cardList = selectedDeck && selectedDeck.cards \n  // if (cardList.length === 0) return <Fragment />;\n  // const validCards = cardList && cardList.filter(card => !card.cards)\n  // const validCards = cardList.filter((card) => !card.cards);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    \"aria-label\": \"breadcrumb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ol\", {\n    className: \"breadcrumb\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"breadcrumb-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 43\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"breadcrumb-item active\",\n    \"aria-current\": \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: `/decks/${selectedDeck.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 70\n    }\n  }, selectedDeck.name)), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"breadcrumb-item active\",\n    \"aria-current\": \"page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Study\"))), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \" \", \"Study: \" + selectedDeck.name));\n}","map":{"version":3,"sources":["/home/iblis/src/flascardProject/Project_Flashcards_Qualified_1/src/Layout/StudyDeck.jsx"],"names":["React","useEffect","useState","Fragment","useHistory","useParams","Link","listDecks","listCards","readDeck","StudyDeck","selectedDeck","setSelectedDeck","cardList","setCardList","flipped","setFlipped","selectedCard","setSelectedCard","deckId","history","abortController","AbortController","signal","then","abort","console","log","id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,IAAhC,QAA4C,kBAA5C;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,cAA/C;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAad,SAAS,EAA5B;AACA,QAAMe,OAAO,GAAGhB,UAAU,EAA1B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAd,IAAAA,SAAS,CAACW,MAAD,EAASE,eAAe,CAACE,MAAzB,CAAT,CAA0CC,IAA1C,CAA+CZ,eAA/C;AAEA,WAAO,MAAMS,eAAe,CAACI,KAAhB,EAAb;AACD,GALQ,EAKN,CAACN,MAAD,CALM,CAAT;AAQAO,EAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ,EAhBkC,CAiBlC;AAEA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,kBAAW,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgC,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhC,CADF,eAEE;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAuC,oBAAa,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA2D,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAG,UAASA,YAAY,CAACiB,EAAG,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwCjB,YAAY,CAACkB,IAArD,CAA3D,CAFF,eAGE;AAAI,IAAA,SAAS,EAAC,wBAAd;AAAuC,oBAAa,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CADF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAM,YAAYlB,YAAY,CAACkB,IAA/B,CARF,CADF;AAoFD","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\"\nimport { useHistory, useParams, Link } from \"react-router-dom\"\n\nimport { listDecks, listCards, readDeck } from \"../utils/api\"\n\nexport default function StudyDeck() {\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [cardList, setCardList] = useState([]);\n  const [flipped, setFlipped] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(0);\n  const { deckId } = useParams();\n  const history = useHistory()\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    listCards(deckId, abortController.signal).then(setSelectedDeck);\n\n    return () => abortController.abort();\n  }, [deckId]);\n\n\n  console.log(selectedDeck)\n  // const cardList = selectedDeck && selectedDeck.cards \n\n  // if (cardList.length === 0) return <Fragment />;\n  // const validCards = cardList && cardList.filter(card => !card.cards)\n  // const validCards = cardList.filter((card) => !card.cards);\n\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\"><Link to=\"/\">Home</Link></li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\"><Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link></li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">Study</li>\n        </ol>\n      </nav>\n      <h1> {\"Study: \" + selectedDeck.name}</h1>\n      {/* {validCards.length > 2 ? (\n        <Fragment>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              {selectedCard + 1 + \" of \" + validCards.length}\n            </h5>\n            {!flipped ? (\n              <Fragment>\n                <p className=\"card-text\">{validCards[selectedCard].front}</p>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  style={{ float: \"left\" }}\n                  onClick={() => setFlipped(true)}\n                >\n                  Flip\n                </button>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <p className=\"card-text\">{validCards[selectedCard].back}</p>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  style={{ float: \"left\" }}\n                  onClick={() => setFlipped(false)}\n                >\n                  Flip\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  style={{ float: \"left\", marginLeft: \"5px\" }}\n                  onClick={() => {\n                    const nextCard = selectedCard + 1\n                    if(validCards[nextCard]) {\n                    setSelectedCard(nextCard)\n                    setFlipped(false)\n                    }\n                    else if (window.confirm(\"Restart Cards?\")) {\n                      setSelectedCard(0)\n                      setFlipped(false)\n                    }\n                    else {\n                      history.push(\"/\")\n                    }\n                  }}\n                >\n                  Next\n                </button>\n              </Fragment>\n            )}\n        </div>\n      </div>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <h3>Not enough cards.</h3>\n          <p>{\"You need at least 3 cards to study. There are \" + validCards.length + \" cards in the deck.\"} </p>\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\n            <button \n                type=\"button\" \n                className=\"btn btn-primary\" \n                style={{ marginLeft: \"5px\"}}\n                onClick\n                >\n                Add Cards\n            </button>\n          </Link>\n        </Fragment>\n      )} */}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}