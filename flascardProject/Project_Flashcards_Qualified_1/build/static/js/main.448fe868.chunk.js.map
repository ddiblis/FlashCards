{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Deck.jsx","Layout/DeckList.jsx","Layout/CreateDeck.jsx","Layout/DisplayDeck.jsx","Layout/StudyCardLogic.jsx","Layout/StudyDeck.jsx","Layout/CreateCard.jsx","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","readDeck","deckId","updatedDeck","id","method","body","JSON","stringify","deleteDeck","cardId","updatedCard","Deck","useState","cardList","setCardList","history","useHistory","useEffect","then","d","find","d2","noOfCards","filter","card","length","style","margin","justifyContent","float","description","to","type","marginLeft","onClick","window","confirm","go","DeckList","deckList","setDeckList","abortController","AbortController","abort","deckCardList","map","key","append","CreateDeck","props","edit","selectedDeck","setSelectedDeck","useParams","form","setForm","pushVar","values","aria-label","aria-current","onSubmit","updateDeck","push","htmlFor","onChange","event","target","value","defaultValue","width","height","DisplayDeck","displayDeck","setDisplayDeck","validCards","validCardList","front","back","deleteCard","StudyCardLogic","flipped","setFlipped","selectedCard","setSelectedCard","nextCard","StudyDeck","CreateCard","parseInt","setVar","readCard","updateCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.448fe868.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { listDecks, deleteDeck } from \"../utils/api\";\n\nexport default function Deck({ deck }) {\n  const [cardList, setCardList] = useState([]);\n  const history = useHistory()\n\n  useEffect(() => {\n    listDecks().then((d) => {\n      const cards = d.find((d2) => d2.id === deck.id).cards;\n      setCardList(cards);\n    });\n  }, [deck.id]);\n\n  const noOfCards = cardList && cardList.filter((card) => !card.cards).length;\n\n  return (\n    <div className=\"card\" style={{ margin: \"5px\" }}>\n      <div className=\"card-body\">\n        <div style={{ justifyContent: \"space-between\" }}>\n          <p className=\"text-muted\" style={{ float: \"right\" }}>\n            {noOfCards + \" cards\"}\n          </p>\n          <h5 className=\"card-title\">{deck.name}</h5>\n        </div>\n        <p className=\"card-text\">{deck.description}</p>\n        <Link to={`/decks/${deck.id}`}>\n          <button type=\"button\" className=\"btn btn-secondary\">\n            View\n          </button>\n        </Link>\n        <Link to={`/decks/${deck.id}/study`}>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Study\n          </button>\n        </Link>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger\"\n          style={{ float: \"right\" }}\n          onClick={() => {\n            if (window.confirm(\"Delete this deck?\")) {\n              deleteDeck(deck.id)\n              history.go(0)\n            }\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { listDecks } from \"../utils/api\";\nimport Deck from \"./Deck\";\n\nexport default function DeckList() {\n  const [deckList, setDeckList] = useState([]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    listDecks(abortController.signal).then(setDeckList);\n\n    return () => abortController.abort();\n  }, []);\n\n  const deckCardList =\n    deckList && deckList.map((deck) => <Deck key={deck.id} deck={deck} />);\n\n  return (\n    <main className=\"container\">\n      <Link to=\"decks/new\">\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-lg\"\n          style={{ margin: \"5px\" }}\n        >\n          Create Deck\n        </button>\n      </Link>\n      <section className=\"column\">{deckCardList}</section>\n    </main>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\n\nimport { readDeck, updateDeck } from \"../utils/api\";\n\nexport default function CreateDeck(props) {\n  const { edit } = props\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const { deckId } = useParams();\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n    id: deckId\n  })\n  const handleNameChange = (event) => pushVar({ name: event.target.value});\n  const handleDescriptionChange = (event) => pushVar({ description: event.target.value});\n  const history = useHistory()\n\n  const pushVar = (values) => {\n    setForm({ ...form, ...values })\n  }\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setSelectedDeck);\n\n    return () => abortController.abort();\n  }, [deckId]);  \n\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {selectedDeck.name}\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <h1>Edit Deck</h1>\n      <form onSubmit={() => {\n        updateDeck(form)\n        history.push(`/decks/${deckId}`)\n      }}>\n        <label htmlFor=\"name\">Name</label> <br />\n        <textarea\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameChange}\n          defaultValue={`${selectedDeck.name}`}\n          style={{ width: \"100%\" }}\n          value={form.name}\n        />{\" \"}\n        <br />\n        <br />\n        <label htmlFor=\"description\">Description</label>\n        <br />\n        <textarea\n          id=\"description\"\n          type=\"text\"\n          name=\"description\"\n          defaultValue={selectedDeck.description}\n          onChange={handleDescriptionChange}\n          style={{ width: \"100%\", height: \"150px\" }}\n          value={form.description}\n        />{\" \"}\n        <br />\n        <div style={{ justifyContent: \"flex-start\" }}>\n          <Link to={`/decks/${selectedDeck.id}`}>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              style={{ marginLeft: \"5px\" }}\n            >\n              Cancel\n            </button>\n          </Link>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\n\nimport { readDeck, deleteDeck, deleteCard } from \"../utils/api\";\n\nexport default function DisplayDeck() {\n  const [displayDeck, setDisplayDeck] = useState([]);\n  const { deckId } = useParams();\n  const history = useHistory()\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDisplayDeck);\n\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const cardList = displayDeck && displayDeck.cards;\n  const validCards = cardList && cardList.filter((card) => !card.cards);\n\n  const validCardList =\n    validCards &&\n    validCards.map((card) => (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div style={{ float: \"left\", width: \"50%\" }}>\n            <p className=\"text-muted\">{card.front}</p>\n          </div>\n          <div style={{ float: \"right\", width: \"50%\" }}>\n            <p className=\"text-muted\" style={{ float: \"right\" }}>\n              {card.back}\n            </p>\n          </div>\n          <br />\n          <div>\n            <Link to={`/decks/${displayDeck.id}/cards/${card.id}/edit`}>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                style={{ float: \"right\", marginLeft: \"5px\" }}\n              >\n                Edit\n              </button>\n            </Link>\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              style={{ float: \"right\" }}\n              onClick={() => {\n                if (window.confirm(\"Delete this card?\")) {\n                  deleteCard(card.id)\n                  history.go(0)\n                }\n              }}\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    ));\n\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {displayDeck.name}\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h3>{displayDeck.name}</h3>\n        <p>{displayDeck.description}</p>\n      </div>\n      <div>\n        <Link to={`/decks/${displayDeck.id}/edit`}>\n          <button type=\"button\" className=\"btn btn-secondary\">\n            Edit\n          </button>\n        </Link>\n        <Link to={`/decks/${displayDeck.id}/study`}>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Study\n          </button>\n        </Link>\n        <Link to={`/decks/${displayDeck.id}/cards/new`}>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Add Cards\n          </button>\n        </Link>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger\"\n          style={{ float: \"right\" }}\n          onClick={() => {\n            if (window.confirm(\"Delete this deck?\")) {\n              deleteDeck(deckId)\n              history.push(\"/\")\n            }\n          }}\n        >\n          Delete\n        </button>\n      </div>\n      <br />\n      <div>\n        <h2>Cards</h2>\n        <section className=\"column\">{validCardList}</section>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function StudyCardLogic(props) {\n  const { validCards } = props;\n  const history = useHistory();\n  const [flipped, setFlipped] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(0);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          {`Card ${(selectedCard + 1)} of ${validCards.length}`}\n        </h5>\n        {!flipped ? (\n          <Fragment>\n            <p className=\"card-text\">{validCards[selectedCard].front}</p>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              style={{ float: \"left\" }}\n              onClick={() => setFlipped(true)}\n            >\n              Flip\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <p className=\"card-text\">{validCards[selectedCard].back}</p>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              style={{ float: \"left\" }}\n              onClick={() => setFlipped(false)}\n            >\n              Flip\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              style={{ float: \"left\", marginLeft: \"5px\" }}\n              onClick={() => {\n                const nextCard = selectedCard + 1;\n                if (validCards[nextCard]) {\n                  setSelectedCard(nextCard);\n                  setFlipped(false);\n                } else if (window.confirm(\"Restart Cards?\")) {\n                  setSelectedCard(0);\n                  setFlipped(false);\n                } else {\n                  history.push(\"/\");\n                }\n              }}\n            >\n              Next\n            </button>\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\n\nimport { readDeck } from \"../utils/api\";\nimport StudyCardLogic from \"./StudyCardLogic\";\n\nexport default function StudyDeck() {\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [cardList, setCardList] = useState([]);\n  const { deckId } = useParams();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then((deck) => {\n      setSelectedDeck(deck);\n      setCardList(deck.cards);\n    });\n\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const validCards = cardList && cardList.filter((card) => !card.cards);\n\n  return (\n    <Fragment>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>{\"Study: \" + selectedDeck.name}</h1>\n      {cardList.length > 0 && validCards.length > 2 ? (\n        <StudyCardLogic validCards={validCards} />\n      ) : (\n        <Fragment>\n          <h3>Not enough cards.</h3>\n          <p>\n            {\"You need at least 3 cards to study. There are \" +\n              validCards.length +\n              \" cards in the deck.\"}{\" \"}\n          </p>\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              style={{ marginLeft: \"5px\" }}\n            >\n              Add Cards\n            </button>\n          </Link>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\n\nimport { readCard, readDeck, updateCard } from \"../utils/api\";\n\nexport default function CreateCard(props) {\n  const { edit } = props\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [selectedCard, setSelectedCard] = useState([]);\n  const { deckId, cardId } = useParams();\n  const [form, setForm] = useState({\n    front: \"\",\n    back: \"\",\n    id: cardId,\n    deckId: parseInt(deckId),\n  });\n  const handleFrontChange = (event) => setVar({ front: event.target.value });\n  const handleBackChange = (event) => setVar({ back: event.target.value });\n  const history = useHistory();\n\n  const setVar = (values) => {\n    setForm({ ...form, ...values });\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then((deck) => {\n      setSelectedDeck(deck);\n      readCard(cardId, abortController.signal).then(setSelectedCard);\n    });\n  }, [deckId, cardId]);\n\n  return (\n    <div className=\"container\">\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            {\"Edit Card \" + cardId}\n          </li>\n        </ol>\n      </nav>\n      <h3>Edit Card</h3>\n      <form\n        onSubmit={() => {\n          updateCard(form);\n          history.push(`/decks/${deckId}`);\n        }}\n      >\n        <label htmlFor=\"front\">Front</label> <br />\n        <textarea\n          id=\"front\"\n          type=\"text\"\n          name=\"front\"\n          defaultValue={selectedCard.front}\n          onChange={handleFrontChange}\n          style={{ width: \"100%\", height: \"150px\" }}\n          value={form.front}\n        />{\" \"}\n        <br />\n        <br />\n        <label htmlFor=\"back\">Back</label>\n        <br />\n        <textarea\n          id=\"back\"\n          type=\"text\"\n          name=\"back\"\n          defaultValue={selectedCard.back}\n          onChange={handleBackChange}\n          style={{ width: \"100%\", height: \"150px\" }}\n          value={form.back}\n        />{\" \"}\n        <br />\n        <div style={{ justifyContent: \"flex-start\" }}>\n          <Link to={`/decks/${selectedDeck.id}`}>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              style={{ marginLeft: \"5px\" }}\n            >\n              Done\n            </button>\n          </Link>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport DeckList from \"./DeckList\";\nimport CreateDeck from \"./CreateDeck\";\nimport DisplayDeck from \"./DisplayDeck\";\nimport StudyDeck from \"./StudyDeck\";\nimport CreateCard from \"./CreateCard\";\n\nfunction Layout() {\n  return (\n    <Fragment>\n      <Link to=\"/\"></Link>\n      <Link to=\"/decks/new\"></Link>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route exact path=\"/decks/new\">\n            <CreateDeck edit=\"false\"/>\n          </Route>\n          <Route exact path={`/decks/:deckId`}>\n            <DisplayDeck />\n          </Route>\n          <Route exact path={`/decks/:deckId/study`}>\n            <StudyDeck />\n          </Route>\n          <Route exact path={`/decks/:deckId/cards/new`}>\n            <CreateCard edit=\"false\"/>\n          </Route>\n          <Route exact path={`/decks/:deckId/edit`}>\n            <CreateDeck edit=\"true\"/>\n          </Route>\n          <Route exact path={`/decks/:deckId/cards/:cardId/edit`}>\n            <CreateCard edit=\"true\"/>\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}